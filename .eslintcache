[{"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\index.js":"1","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\AddCourses\\index.js":"2","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\Dashboard\\index.js":"3","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\LandingPage\\index.js":"4","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\auth\\EmailVerify\\index.js":"5","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\widgets\\Footer\\index.js":"6","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\widgets\\DashboardHeader\\index.js":"7","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\assets\\images\\index.js":"8","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\components\\Input\\index.js":"9"},{"size":728,"mtime":1611915082753,"results":"10","hashOfConfig":"11"},{"size":13463,"mtime":1611920912525,"results":"12","hashOfConfig":"11"},{"size":4603,"mtime":1611918767062,"results":"13","hashOfConfig":"11"},{"size":3778,"mtime":1612274980759,"results":"14","hashOfConfig":"11"},{"size":1049,"mtime":1611918767078,"results":"15","hashOfConfig":"11"},{"size":1669,"mtime":1612252667084,"results":"16","hashOfConfig":"11"},{"size":1295,"mtime":1612263104865,"results":"17","hashOfConfig":"11"},{"size":1224,"mtime":1611915458446,"results":"18","hashOfConfig":"11"},{"size":660,"mtime":1612255521155,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"52d2ze",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\index.js",["42","43","44","45","46","47"],"/** @format */\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport { AddCourses } from \"./pages/app/AddCourses\";\r\nimport { Dashboard } from \"./pages/app/Dashboard\";\r\nimport { DashboardHeader } from \"./widgets/DashboardHeader\";\r\nimport { Footer } from \"./widgets/Footer\";\r\nimport { EmailVerify } from \"./pages/auth/EmailVerify\";\r\nimport App from \"./components/App\";\r\nimport { LandingPage } from \"./pages/app/LandingPage\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n",["48","49"],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\AddCourses\\index.js",["50"],"import React, { useState, useEffect } from \"react\";\r\nimport { AddCourseInput } from \"../../../components/AddCourseInput\";\r\nimport axios from \"axios\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { IoIosArrowDown, IoIosArrowUp } from \"react-icons/io\";\r\nimport { DashboardHeader } from \"../../../widgets/DashboardHeader\";\r\nimport { Footer } from \"../../../widgets/Footer\";\r\nimport \"./AddCourses.css\";\r\nimport { Button } from \"../../../components/Button\";\r\nimport { getCategories } from \"../../../api\";\r\nimport { dashboardImage } from \"../../../assets/images\";\r\nimport { Loader } from \"../../../components/Loader\";\r\n\r\nfunction AddCourses() {\r\n  const [toggle, setToggle] = useState({ one: true, two: false, three: false });\r\n\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const [courseImage, setCourseImage] = useState(\"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [form1, setForm1] = useState({\r\n    tutor_id: JSON.parse(localStorage.getItem(\"userDetails\")).data.uid,\r\n    name: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    category: \"\",\r\n    img: \"\",\r\n  });\r\n\r\n  const [form2, setForm2] = useState({\r\n    course_id: \"\",\r\n    name: \"\",\r\n  });\r\n\r\n  const [form3, setForm3] = useState({\r\n    course_id: \"\",\r\n    module_id: \"\",\r\n    name: \"\",\r\n    img: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    const name = event.target.className.baseVal || event.target.name;\r\n    setToggle({ ...toggle, [name]: !toggle[name] });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    if (event.target.files) {\r\n      let currentImg = event.target.name;\r\n      setForm1({ ...form1, [currentImg]: event.target.files[0] });\r\n    } else {\r\n      let currentInput = event.target.name;\r\n      setForm1({ ...form1, [currentInput]: event.target.value });\r\n    }\r\n  };\r\n\r\n  const handleChange2 = (event) => {\r\n    let currentInput = event.target.name;\r\n    setForm2({ ...form2, [currentInput]: event.target.value });\r\n  };\r\n\r\n  const handleChange3 = (event) => {\r\n    if (event.target.files) {\r\n      let currentVideo = event.target.name;\r\n      setForm3({ ...form3, [currentVideo]: event.target.files[0] });\r\n    } else {\r\n      let currentInput = event.target.name;\r\n      setForm3({ ...form3, [currentInput]: event.target.value });\r\n    }\r\n  };\r\n  useEffect(() => getCategories(setCategories), []);\r\n\r\n  return (\r\n    <>\r\n      <DashboardHeader />\r\n      <main className=\"addcourse-page container\">\r\n        <h1>Add Course</h1>\r\n        <section className=\"card shadow py-5 px-4 mb-5\">\r\n          <div className=\"row col-12\">\r\n            <div className=\"col-sm-12 col-md-6\">\r\n              <div className=\"addcourse-a\">\r\n                <section>\r\n                  <div className=\"courses-form-header\">\r\n                    <h2 className=\"py-4\">Course Details</h2>\r\n                    <button name=\"one\" onClick={handleClick}>\r\n                      <IconContext.Provider\r\n                        value={{\r\n                          className: \"one\",\r\n                        }}\r\n                      >\r\n                        {toggle.one ? <IoIosArrowUp /> : <IoIosArrowDown />}\r\n                      </IconContext.Provider>\r\n                    </button>\r\n                  </div>\r\n                  {toggle[\"one\"] && (\r\n                    <form\r\n                      onSubmit={async (e) => {\r\n                        e.preventDefault();\r\n                        setLoading(true);\r\n                        let formData = new FormData();\r\n                        formData.append(\"img\", form1.img);\r\n                        formData.append(\"description\", form1.description);\r\n                        formData.append(\"price\", form1.price);\r\n                        formData.append(\"category\", form1.category);\r\n                        formData.append(\"name\", form1.name);\r\n                        formData.append(\"tutor_id\", form1.tutor_id);\r\n                        console.log(formData);\r\n                        axios\r\n                          .post(\r\n                            \"https://cerebrum-v1.herokuapp.com/api/tutor/course/create\",\r\n                            formData,\r\n                            {\r\n                              headers: {\r\n                                \"Content-Type\": \"multipart/form-data\",\r\n                              },\r\n                            }\r\n                          )\r\n                          .then((res) => {\r\n                            console.log(res.data.data);\r\n                            setCourseImage(res.data.data.image_url);\r\n                            setForm2({\r\n                              ...form2,\r\n                              course_id: res.data.data._id,\r\n                            });\r\n                            setLoading(false);\r\n                          })\r\n                          .catch((err) => console.log(form1.tutor_id));\r\n                      }}\r\n                      enctype=\"multipart/form-data\"\r\n                    >\r\n                      <label>Name of Course</label>\r\n                      <AddCourseInput\r\n                        placeholder=\"Enter course name\"\r\n                        name=\"name\"\r\n                        onChange={handleChange}\r\n                        disabled={loading}\r\n                      />\r\n                      <label>Course Description</label>\r\n                      <textarea\r\n                        className=\"form-control mb-3\"\r\n                        name=\"description\"\r\n                        onChange={handleChange}\r\n                        placeholder=\"Enter course description...\"\r\n                        rows=\"7\"\r\n                        disabled={loading}\r\n                      ></textarea>\r\n                      <label>Category</label>\r\n                      <select\r\n                        name=\"category\"\r\n                        onChange={handleChange}\r\n                        className=\"form-select mb-3\"\r\n                        aria-label=\"Default select example\"\r\n                        disabled={loading}\r\n                      >\r\n                        <option>Select course category</option>\r\n                        {categories.map((item) => (\r\n                          <option key={item._id} value={item.name}>\r\n                            {item.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      <label>Cover Image</label>\r\n                      <AddCourseInput\r\n                        placeholder=\"Upload Image\"\r\n                        type=\"file\"\r\n                        name=\"img\"\r\n                        onChange={handleChange}\r\n                        disabled={loading}\r\n                      />\r\n                      <label>Price</label>\r\n                      <AddCourseInput\r\n                        type=\"text\"\r\n                        placeholder=\"Enter course price\"\r\n                        name=\"price\"\r\n                        onChange={handleChange}\r\n                        disabled={loading}\r\n                      />\r\n                      <Button\r\n                        className=\"btn btn-primary\"\r\n                        text=\"Save\"\r\n                        loadingIcon={loading && <Loader />}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          const userId = localStorage.getItem(\"userDetails\")\r\n                            .data.uid;\r\n                          console.log(userId);\r\n                        }}\r\n                      />\r\n                    </form>\r\n                  )}\r\n                </section>\r\n                <section>\r\n                  <div className=\"courses-form-header\">\r\n                    <h2 className=\"py-4\">Module</h2>\r\n                    <button name=\"two\" onClick={handleClick}>\r\n                      <IconContext.Provider\r\n                        value={{\r\n                          className: \"two\",\r\n                        }}\r\n                      >\r\n                        {toggle.two ? <IoIosArrowUp /> : <IoIosArrowDown />}\r\n                      </IconContext.Provider>\r\n                    </button>\r\n                  </div>\r\n                  {toggle[\"two\"] && (\r\n                    <form\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        setLoading(true);\r\n                        console.log(form2);\r\n                        axios\r\n                          .post(\r\n                            \"https://cerebrum-v1.herokuapp.com/api/tutor/module/create\",\r\n                            form2\r\n                          )\r\n                          .then((res) => {\r\n                            setForm3({\r\n                              ...form3,\r\n                              course_id: form2.course_id,\r\n                              module_id: res.data.data._id,\r\n                            });\r\n                            setLoading(false);\r\n                          });\r\n                      }}\r\n                    >\r\n                      <label>Module</label>\r\n                      <AddCourseInput\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter module name\"\r\n                        onChange={handleChange2}\r\n                        disabled={loading}\r\n                      />\r\n                      <Button\r\n                        className=\"btn btn-primary\"\r\n                        loadingIcon={loading && <Loader />}\r\n                        text=\"Save\"\r\n                      />\r\n                    </form>\r\n                  )}\r\n                </section>\r\n                <section>\r\n                  <div className=\"courses-form-header\">\r\n                    <h2 className=\"py-4\">Lesson</h2>\r\n                    <button name=\"three\" onClick={handleClick}>\r\n                      <IconContext.Provider\r\n                        value={{\r\n                          className: \"three\",\r\n                        }}\r\n                      >\r\n                        {toggle.three ? <IoIosArrowUp /> : <IoIosArrowDown />}\r\n                      </IconContext.Provider>\r\n                    </button>\r\n                  </div>\r\n                  {toggle[\"three\"] && (\r\n                    <form\r\n                      onSubmit={async (e) => {\r\n                        e.preventDefault();\r\n                        setLoading(true);\r\n                        let formData = new FormData();\r\n                        formData.append(\"img\", form3.img);\r\n                        formData.append(\"description\", form3.description);\r\n                        formData.append(\"name\", form3.name);\r\n                        formData.append(\"course_id\", form3.course_id);\r\n                        formData.append(\"module_id\", form3.module_id);\r\n                        console.log(formData);\r\n                        axios\r\n                          .post(\r\n                            \"https://cerebrum-v1.herokuapp.com/api/tutor/lesson/create\",\r\n                            formData,\r\n                            {\r\n                              headers: {\r\n                                \"Content-Type\": \"multipart/form-data\",\r\n                              },\r\n                            }\r\n                          )\r\n                          .then((res) => {\r\n                            console.log(res);\r\n                            setLoading(false);\r\n                          })\r\n                          .catch((err) => console.log(form1, form2, form3));\r\n                      }}\r\n                      enctype=\"multipart/form-data\"\r\n                    >\r\n                      <label>Lesson Name</label>\r\n                      <AddCourseInput\r\n                        placeholder=\"Enter lesson name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        disabled={loading}\r\n                        onChange={handleChange3}\r\n                      />\r\n                      <label>Lesson Video</label>\r\n                      <AddCourseInput\r\n                        placeholder=\"Upload Video\"\r\n                        type=\"file\"\r\n                        name=\"img\"\r\n                        disabled={loading}\r\n                        onChange={handleChange3}\r\n                      />\r\n                      <label>Lesson Description</label>\r\n                      <textarea\r\n                        className=\"form-control mb-3\"\r\n                        placeholder=\"Enter lesson description\"\r\n                        rows=\"7\"\r\n                        name=\"description\"\r\n                        loading={loading}\r\n                        onChange={handleChange3}\r\n                      ></textarea>\r\n                      <Button\r\n                        className=\"btn btn-primary\"\r\n                        text=\"Publish Course\"\r\n                        loadingIcon={loading && <Loader />}\r\n                      />\r\n                    </form>\r\n                  )}\r\n                </section>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-6\">\r\n              <div className=\"mt-4 addcourse-b col-5\">\r\n                <img src={courseImage || dashboardImage} alt=\"No Image\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport { AddCourses };\r\n","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\Dashboard\\index.js",[],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\app\\LandingPage\\index.js",["51","52","53"],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\pages\\auth\\EmailVerify\\index.js",["54","55"],"/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nconst EmailVerify = () => {\r\n  let url_string = window.location.href;\r\n  let url = new URL(url_string);\r\n  let url_params_uid = url.searchParams.get(\"uid\");\r\n  const url_params_verifyToken = url.searchParams.get(\"verifyToken\");\r\n  const uid = url_params_uid;\r\n  const verifyToken = url_params_verifyToken;\r\n  console.log(uid, verifyToken);\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        `https://cerebrum-v1.herokuapp.com/api/auth/verify-email/?uid=${uid}&verifyToken=${verifyToken}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.message === \"Email verified successfully\") {\r\n          window.open(\"/login?msg=success\", \"_self\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // if (err.response.data.message === \"Email is already verified\") {\r\n        //   window.open(\"/login?msg=verified\", \"_self\");\r\n        console.log(err.response);\r\n      });\r\n  }, []);\r\n\r\n  return <div>&nbsp;</div>;\r\n};\r\n\r\nexport { EmailVerify };\r\n","C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\widgets\\Footer\\index.js",[],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\widgets\\DashboardHeader\\index.js",[],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\assets\\images\\index.js",["56"],"C:\\Users\\DELL\\Desktop\\Work\\Github\\cerebrum-new\\src\\components\\Input\\index.js",[],{"ruleId":"57","severity":1,"message":"58","line":8,"column":10,"nodeType":"59","messageId":"60","endLine":8,"endColumn":20},{"ruleId":"57","severity":1,"message":"61","line":9,"column":10,"nodeType":"59","messageId":"60","endLine":9,"endColumn":19},{"ruleId":"57","severity":1,"message":"62","line":10,"column":10,"nodeType":"59","messageId":"60","endLine":10,"endColumn":25},{"ruleId":"57","severity":1,"message":"63","line":11,"column":10,"nodeType":"59","messageId":"60","endLine":11,"endColumn":16},{"ruleId":"57","severity":1,"message":"64","line":12,"column":10,"nodeType":"59","messageId":"60","endLine":12,"endColumn":21},{"ruleId":"57","severity":1,"message":"65","line":14,"column":10,"nodeType":"59","messageId":"60","endLine":14,"endColumn":21},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":326,"column":17,"nodeType":"72","endLine":326,"endColumn":75},{"ruleId":"70","severity":1,"message":"71","line":37,"column":13,"nodeType":"72","endLine":37,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":72,"column":17,"nodeType":"72","endLine":72,"endColumn":63},{"ruleId":"70","severity":1,"message":"71","line":80,"column":15,"nodeType":"72","endLine":80,"endColumn":61},{"ruleId":"57","severity":1,"message":"73","line":3,"column":17,"nodeType":"59","messageId":"60","endLine":3,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":28,"column":6,"nodeType":"76","endLine":28,"endColumn":8,"suggestions":"77"},{"ruleId":"57","severity":1,"message":"78","line":16,"column":8,"nodeType":"59","messageId":"60","endLine":16,"endColumn":12},"no-unused-vars","'AddCourses' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'DashboardHeader' is defined but never used.","'Footer' is defined but never used.","'EmailVerify' is defined but never used.","'LandingPage' is defined but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'uid' and 'verifyToken'. Either include them or remove the dependency array.","ArrayExpression",["81"],"'Play' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [uid, verifyToken]",{"range":"84","text":"85"},[981,983],"[uid, verifyToken]"]
